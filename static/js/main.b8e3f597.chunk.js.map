{"version":3,"sources":["components/Osd.js","components/AudioPlayer.js","components/Initiator.js","App.js","serviceWorker.js","index.js"],"names":["Osd","props","setOsdInstance","ordinal","audioEl","osdInstance","init","gestureSettings","scrollToZoom","clickToZoom","dblClickToZoom","pinchToZoom","pinchRotate","flickEnabled","useEffect","window","osd","OpenSeadragon","id","showZoomControl","showFullPageControl","showNavigationControl","showSequenceControl","showRotationControl","gestureSettingsMouse","gestureSettingsTouch","gestureSettingsPen","gestureSettingsUnknown","panHorizontal","panVertical","tileSources","location","origin","addHandler","console","log","viewport","zoomTo","getMaxZoom","undefined","zoomSpring","animationTime","duration","goHome","goToPage","a","pause","src","play","AudioPlayer","audioRef","useRef","setAudioEl","setOrdinal","totalTracks","current","onended","ref","type","Initiator","handleClick","e","setInit","preventDefault","className","onClick","App","useState","totalTrack","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8e3f597.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport OpenSeadragon from 'openseadragon';\n\n\nfunction Osd(props) {\n  const { \n    setOsdInstance,\n    ordinal,\n    audioEl,\n    osdInstance,\n    init,\n  } = props;\n  const gestureSettings = {\n    scrollToZoom: false,\n    clickToZoom: false,\n    dblClickToZoom: false,\n    pinchToZoom: false,\n    pinchRotate: false,\n    flickEnabled: false\n  };\n  \n  useEffect(() => {\n    window.osd = OpenSeadragon({\n      id: 'viewer',\n      showZoomControl: false,\n      showFullPageControl: false,\n      showNavigationControl: false,\n      showSequenceControl: false,\n      showRotationControl: false,\n      gestureSettingsMouse: gestureSettings,\n      gestureSettingsTouch: gestureSettings,\n      gestureSettingsPen: gestureSettings,\n      gestureSettingsUnknown: gestureSettings,\n      panHorizontal: false,\n      panVertical: false,\n      tileSources: [\n        `${window.location.origin}/assets/images/0.json`,\n        `${window.location.origin}/assets/images/1.json`,\n        `${window.location.origin}/assets/images/2.json`,\n      ],\n    });\n    window.osd.addHandler('open', function() {\n      // Set to max zoom center\n      console.log('event: open')\n      window.osd.viewport.zoomTo(window.osd.viewport.getMaxZoom(), undefined, true);\n    });\n    window.osd.addHandler('page', function() {\n      // Set to max zoom center\n      console.log('event: page')\n      window.osd.viewport.zoomTo(window.osd.viewport.getMaxZoom(), undefined, true);\n      if (init) {\n        console.log('go')\n      }\n    });\n    setOsdInstance(window.osd);\n  }, []);\n\n  if (props.init) {\n    window.osd.viewport.zoomSpring.animationTime = audioEl.duration+10;\n    window.osd.viewport.goHome();      \n  }\n\n  useEffect(() => {\n    if (osdInstance && osdInstance.viewport) {\n      console.log('ordinal updated: change image to ' + ordinal);\n      osdInstance.goToPage(ordinal);\n      osdInstance.viewport.goHome();\n    }\n  }, [osdInstance, ordinal, audioEl]);\n\n  useEffect(() => {\n    async function play() {\n      if (audioEl && init) {\n        audioEl.pause();\n        audioEl.src=`${window.location.origin}/assets/audio/${ordinal}.mp3`;\n        await audioEl.play()\n      }\n    }\n    play();\n  }, [init, ordinal, audioEl])\n\n  return (\n    <div id=\"viewer\">\n    </div>\n  );\n}\n\nexport default Osd;\n","import React, { useEffect, useRef } from 'react';\n\nfunction AudioPlayer(props) {\n  const audioRef = useRef(null);\n  const {\n    setAudioEl,\n    setOrdinal,\n    ordinal,\n    audioEl,\n    totalTracks\n  } = props;\n\n  useEffect(() => {\n    setAudioEl(audioRef.current);\n  }, [setAudioEl]);\n\n  useEffect(() => {\n    // When audio finished progress ordinal\n    if (audioEl) {\n      audioEl.onended = () => {\n        if (ordinal < totalTracks - 1) {\n          setOrdinal(ordinal + 1);\n        }\n        else {\n          setOrdinal(0);\n        }\n      }\n    }\n  }, [totalTracks, audioEl, ordinal, setOrdinal]);\n\n  return (\n    <audio ref={audioRef} id=\"player\">\n      <source src={`${window.location.origin}/assets/audio/${props.ordinal}.mp3`} type=\"audio/mp3\" />\n    </audio>\n  );\n}\n\nexport default AudioPlayer;\n","import React, { useEffect } from 'react';\n\nfunction Initiator(props) {\n\n  const handleClick = (e) => {\n    props.setInit(true);\n    e.preventDefault();\n  };\n\n  const render = () => {\n    if (!props.init) {\n      return (<button className=\"initButton\" onClick={handleClick}>Start</button>)\n    }\n    else {\n      return null;\n    }\n  }\n  useEffect(() => {\n\n  }, []);\n\n\n  return (\n    <div>\n      {render()}\n    </div>\n  );\n}\n\nexport default Initiator;\n","import React, { useState } from 'react';\nimport Osd from './components/Osd';\nimport AudioPlayer from './components/AudioPlayer';\nimport Initiator from './components/Initiator';\nimport './App.css';\n\nfunction App() {\n  const totalTracks = 3;\n  const [ordinal, setOrdinal] = useState(0);\n  const [audioEl, setAudioEl] = useState(null);\n  const [osdInstance, setOsdInstance] = useState({});\n  const [init, setInit] = useState(false);\n\n  return (\n    <div>\n      <Initiator\n        init={init}\n        setInit={setInit} />\n      <Osd\n        init={init}\n        ordinal={ordinal}\n        audioEl={audioEl}\n        osdInstance={osdInstance}\n        setOsdInstance={setOsdInstance}\n        totalTrack={totalTracks}\n      />\n      <AudioPlayer \n        ordinal={ordinal}\n        audioEl={audioEl}\n        setOrdinal={setOrdinal}\n        setAudioEl={setAudioEl}\n        totalTracks={totalTracks}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}